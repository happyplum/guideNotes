import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.DtxlzkAV.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"gitlab/gitlabCI/index.md","filePath":"gitlab/gitlabCI/index.md"}'),n={name:"gitlab/gitlabCI/index.md"};function p(l,s,h,c,r,d){return t(),i("div",null,[...s[0]||(s[0]=[e(`<p>有关 runner 的 ci.yml 配置笔记</p><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><h3 id="cache" tabindex="-1">cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;cache&quot;">​</a></h3><p>cache：用来存储项目的 dependencies，以使下次跑 pipline 的时候更快一些 第一次跑 pipline 的时候下载了外部的依赖了（比如说第三方 jar 包），这样下次跑 pipline 时，就不用再从网络上下载了。但是 stage 之间的中间产物的传递应该用 artifacts。</p><p>!!! chache 有全局和某个步骤中，这里只举例步骤中的 !!!</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${CI_PROJECT_PATH_SLUG}_\${CI_COMMIT_REF_SLUG}&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.yarn/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yarn.lock</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #policy: push #push || pull 表示只拉或者只推，默认开始拉结束推</span></span></code></pre></div><h3 id="artifacts" tabindex="-1">artifacts <a class="header-anchor" href="#artifacts" aria-label="Permalink to &quot;artifacts&quot;">​</a></h3><p>artifacts：用来在 stage 之间传递 stage 生成物 同一个 pipline 里不同的 stage 之间共享生成物的，在不同的 pipline 之间不可用。</p><p>!!! artifacts 只在某个步骤中，用于输出产物，提供给界面下载 !!!</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifacts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dist</span></span></code></pre></div><h3 id="space-colon" tabindex="-1">space&amp;&amp;colon <a class="header-anchor" href="#space-colon" aria-label="Permalink to &quot;space&amp;&amp;colon&quot;">​</a></h3><p>在我的配置里有个修改 npm 和 yarn 指向私有仓库用脚本</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo -e &quot;registry=\${NPM_REG_SERVER}&quot; &gt;&gt; .npmrc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">echo -e &quot;npmRegistryServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\&quot;\${NPM_REG_SERVER}\\&quot;&quot; &gt;&gt; yarnrc.yml</span></span></code></pre></div><p>可以看到，明显<code>npmRegistryServer: </code>被识别为了一个参数，这是由于 yaml 规则所限制，为了避免识别，可以使用</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;echo -e &quot;npmRegistryServer: \\&quot;\${NPM_REG_SERVER}\\&quot;&quot; &gt;&gt; yarnrc.yml&#39;</span></span></code></pre></div><p>但是我里面又包含了\${NPM_REG_SERVER}自定义参数，一定使用&#39;&#39;包裹，内部就不再被识别，这时可以考虑使用<code>|</code>或者<code>&gt;</code>来解决，如：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  echo -e &quot;npmRegistryServer: \\&quot;\${NPM_REG_SERVER}\\&quot;&quot; &gt;&gt; yarnrc.yml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  echo -e &quot;npmRegistryServer: \\&quot;\${NPM_REG_SERVER}\\&quot;&quot; &gt;&gt; yarnrc.yml</span></span></code></pre></div>`,18)])])}const g=a(n,[["render",p]]);export{k as __pageData,g as default};
