import{_ as a,c as e,o as i,ae as o}from"./chunks/framework.DtxlzkAV.js";const u=JSON.parse('{"title":"model","description":"","frontmatter":{},"headers":[],"relativePath":"ai/model/index.md","filePath":"ai/model/index.md"}'),n={name:"ai/model/index.md"};function s(p,t,l,r,d,h){return i(),e("div",null,[...t[0]||(t[0]=[o('<h1 id="model" tabindex="-1">model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;model&quot;">​</a></h1><h2 id="模型转换" tabindex="-1">模型转换 <a class="header-anchor" href="#模型转换" aria-label="Permalink to &quot;模型转换&quot;">​</a></h2><p>safetensors 转换为 guff</p><p>我们可以利用 llama.cpp 的 convert_*.py 脚本进行转换及量化</p><p>这里我们用 convert_hf_to_gguf_update.py 举例进行转换</p><p>脚本命令</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python convert_hf_to_gguf_update.py </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D://gpt/Qwen/2.5VL/Qwen2.5-VL-7B-Instruct&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outtype f8</span></span></code></pre></div><h1 id="windows运行" tabindex="-1">windows运行 <a class="header-anchor" href="#windows运行" aria-label="Permalink to &quot;windows运行&quot;">​</a></h1><p>anaconda prompt 启动conda专用python环境 conda create -n QwenLocalVL python=3.12 创建名为QwenLocalVL的python虚拟环境 conda activate QwenLocalVL 安装python依赖 pip install git+https://github.com/huggingface/transformers accelerate pip install qwen-vl-utils pip install torchvision modelscope</p><p>拉取代码，修改调整</p><p>pycharm右下角切换环境</p><p>gpu加速，cuda官网安装下cuda，在根据cuda版本安装pytorch，不需要修改代码</p><h1 id="加速" tabindex="-1">加速 <a class="header-anchor" href="#加速" aria-label="Permalink to &quot;加速&quot;">​</a></h1><p>关于flash-attention的windows下编译 管理员运行conda 进入目录 pip install -r requirements.txt python setup.py install（这大约需要 2 个小时）在此期间，所有 CPU 核心都处于最大使用率，并且 RAM 也承受着重负载。 python setup.py bdist_wheel（大约需要 1 分钟） 你将获得一个 whl 文件 \\flash-attention\\dist 生成的 whl 文件可以使用以下命令安装在目标项目环境中 pip install [path to wheelfilename].whl</p><p>如果碰到不存在triton，还需要编译，网上找了个 <a href="https://github.com/happyplum/triton-windows?tab=readme-ov-file" target="_blank" rel="noreferrer">https://github.com/happyplum/triton-windows?tab=readme-ov-file</a> pip install <a href="https://github.com/woct0rdho/triton-windows/releases/download/v3.2.0-windows.post10/triton-3.2.0-cp312-cp312-win_amd64.whl" target="_blank" rel="noreferrer">https://github.com/woct0rdho/triton-windows/releases/download/v3.2.0-windows.post10/triton-3.2.0-cp312-cp312-win_amd64.whl</a> 需要安装MSVC 和 Windows SDK，vcredist MSVC装好了需要添加cl.exe的路径到python中，需要自己找下 我本地电脑上为 C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.42.34433\\bin\\Hostx64\\x64</p><h1 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h1><p>cd /d D:\\ai\\Qwen\\Qwen2.5-VL conda activate QwenLocalVL python test.py</p>',17)])])}const m=a(n,[["render",s]]);export{u as __pageData,m as default};
