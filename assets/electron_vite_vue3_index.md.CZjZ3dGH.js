import{_ as o,c as a,o as t,ae as c}from"./chunks/framework.DtxlzkAV.js";const h=JSON.parse('{"title":"electron 打包 vite+vue3 项目","description":"","frontmatter":{},"headers":[],"relativePath":"electron/vite_vue3/index.md","filePath":"electron/vite_vue3/index.md"}'),r={name:"electron/vite_vue3/index.md"};function n(d,e,i,s,l,p){return t(),a("div",null,[...e[0]||(e[0]=[c('<h1 id="electron-打包-vite-vue3-项目" tabindex="-1">electron 打包 vite+vue3 项目 <a class="header-anchor" href="#electron-打包-vite-vue3-项目" aria-label="Permalink to &quot;electron 打包 vite+vue3 项目&quot;">​</a></h1><h2 id="笔记" tabindex="-1">笔记 <a class="header-anchor" href="#笔记" aria-label="Permalink to &quot;笔记&quot;">​</a></h2><h1 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h1><p>electron 使用 <code>package.json</code> 来定位 electron 的入口，在使用 vue 的过程中如果公用一份 <code>package.json</code> 可能会引发类似于<code>type&quot;: &quot;module&quot;</code>冲突之类的问题，建议初期按照多项目模块管理结构将<code>tsconfig.json</code>和<code>package.json</code>直接分开</p><h1 id="关于-typescript" tabindex="-1">关于 typescript <a class="header-anchor" href="#关于-typescript" aria-label="Permalink to &quot;关于 typescript&quot;">​</a></h1><p>因为前端项目已经普及 ts，如果 electron 也想使用 ts 进行开发，也可以配置 ts，但是<code>electron-builder</code>的时候需要引用 js 文件 这时候就可以使用 tsc，打包前将 ts 文件进行转换，转换成 js 文件。相对的 <code>package.json</code> 中 main 的入口文件也需要修改为打包后的 js 路径</p><p>关于生成 .tsbuildinfo 文件，可以关闭 composite 来防止生成</p><h1 id="关于打包" tabindex="-1">关于打包 <a class="header-anchor" href="#关于打包" aria-label="Permalink to &quot;关于打包&quot;">​</a></h1><p>使用<code>electron-builder</code>进行打包即可</p><h1 id="关于预览" tabindex="-1">关于预览 <a class="header-anchor" href="#关于预览" aria-label="Permalink to &quot;关于预览&quot;">​</a></h1><p>如果你 tsconfig 处理的时候<code>module</code>设置为了 commonJS 进行转换 那么预览的时候 electron 是使用 CommonJS 进行加载 如果 package 中设置了<code>&quot;type&quot;: &quot;module&quot;</code>,请设置文件名为 cjs 或删除 module</p><p>如果你 tsconfig 处理的时候<code>module</code>设置为了 ES 进行转换 那么打包的时候请注意，nodejs 在使用 module 进行加载的时候<code>不支持require, exports, module.exports, __filename, __dirname</code> 请进行处理</p>',12)])])}const m=o(r,[["render",n]]);export{h as __pageData,m as default};
